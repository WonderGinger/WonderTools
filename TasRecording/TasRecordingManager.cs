using FMOD;
using Monocle;
using MonoMod.Utils;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Celeste.Mod.WonderTools.TasRecording
{
    public class TasRecordingManager
    {
        public static TasRecordingManager Instance { get; private set; }

        private List<String> lines = new List<String>();
        private StreamWriter _tasRecordingWriter;
        private bool _recording = false;

        private TasRecordingState _state;
        public enum PrevButtonInputState
        {
            BUTTON_NOT_PRESSED = 0,
            BUTTON_PRIMARY = 1,
            BUTTON_SECONDARY = 2
        }
        public TasRecordingManager()
        {
            Instance = this;
            _state = new TasRecordingState();
        }
        public void OnUpdate()
        {
            if (WonderToolsModule.Settings.KeyStartRecording.Pressed && !_recording)
            {
                Logger.Log(LogLevel.Info, nameof(WonderToolsModule), "Enabling recording");
                InitTasRecordingFile("Test1");
                _state = new TasRecordingState();
                _recording = true;
            }
            else if (WonderToolsModule.Settings.KeyStopRecording.Pressed)
            {
                if (!_recording) { return; }
                _recording = false;
                SaveTasRecordingFile();
            }
            if (!_recording) return;
            
            if (Engine.Scene is Level level)
            {
                if (level.Paused || DynamicData.For(level).Get<bool>("wasPaused"))
                {
//                    Logger.Log(LogLevel.Info, nameof(WonderToolsModule), "paused");
                    _state.Paused = true;
                }
                else
                {
                    _state.Paused = false;
                }
            }
            _state.Update();

            if (_state.PrevLine == _state.Line)
            {
                _state.framesSinceChange++;
            } else
            {
                //Logger.Log(LogLevel.Info, nameof(WonderToolsModule), String.Format("{0} {1} {2}", _state.framesSinceChange, _state.PrevLine, _state.Line));
                AppendTasLine();
                _state.framesSinceChange = 1;
            }

            return;
        }
        public void Level_OnLoad(Level level, Player.IntroTypes playerIntro, bool isFromLoader)
        {
            if (!_recording) { return; }
        }

        public void InitTasRecordingFile(string path)
        {
            string filename = Path.Combine(WonderToolsModule.REPLAY_ROOT, path + ".tas");

            Logger.Log(LogLevel.Info, nameof(WonderToolsModule), "Creating recording file");
            Directory.CreateDirectory(Path.Combine(WonderToolsModule.REPLAY_ROOT));
            ClearTasRecordingFile(filename);
            _tasRecordingWriter = new StreamWriter(filename);
            lines.Add(item: $"# This file was autogenerated by {nameof(WonderToolsModule)} on {DateTime.Now}");
        }

        public void AppendTasLine()
        {
            string prefixFrameCount = String.Format("{0, 4}", _state.framesSinceChange.ToString());
            string tasLine =  prefixFrameCount + _state.PrevLine;
            lines.Add(tasLine);
        }

        public static void AppendTasInputStr(ref string inputLine, string inputStr)
        {
            inputLine += $",{inputStr}";
        }

        public void SaveTasRecordingFile()
        {
            Logger.Log(LogLevel.Info, nameof(WonderToolsModule), "Saving recording file");
            foreach (string line in lines)
            {
                _tasRecordingWriter.WriteLine(line);
            }
            _tasRecordingWriter.Flush();
            _tasRecordingWriter.Close();
        }

        public void ClearTasRecordingFile(string filename)
        {
            Logger.Log(LogLevel.Info, nameof(WonderToolsModule), String.Format("Clearing recording file {0}", this));
            File.WriteAllText(filename, string.Empty);
            lines.Clear();
        }
        public override String ToString()
        {
            String ret = Environment.NewLine;
            int ii = 0;
            foreach (String line in lines)
            {
                ii++;
                ret += ii + " " + line + Environment.NewLine;
            }
            return ret;
        }
    }
}

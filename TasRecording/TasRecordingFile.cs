using System;
using System.IO;
using System.Collections.Generic;

using static Celeste.Mod.WonderTools.TasRecording.TasRecordingManager;

namespace Celeste.Mod.WonderTools.TasRecording
{
    internal class TasRecordingFile
    {
        private readonly string filename;
        private StreamWriter _tasRecordingWriter;
        private readonly List<String> lines;
        public bool IsOpen { get; set;} = false;
        public TasRecordingFile (string name)
        {
            IsOpen = false;
            lines = new List<String>();
            filename = Path.Combine(WonderToolsModule.REPLAY_ROOT, name);
        }
        
        ~TasRecordingFile()
        {
            if (!IsOpen) return;
            CloseTasRecordingFile();
        }

        public void InitTasRecordingFile(InitTasRecordingOptions options)
        {
            string path = Path.Combine(filename + ".tas");

            if (options.fileRestart)
            {
                Logger.Log(LogLevel.Info, nameof(WonderToolsModule), $"Creating recording file {path}");
                CloseTasRecordingFile();

                Directory.CreateDirectory(Path.Combine(WonderToolsModule.REPLAY_ROOT));
                ClearTasRecordingFile(path);

                _tasRecordingWriter = new StreamWriter(path);
                lines.Add(item: $"# This file was autogenerated by {nameof(WonderToolsModule)} on {DateTime.Now}");
            }
            if (options.fileContinue)
            {
                Logger.Log(LogLevel.Debug, nameof(WonderToolsModule), $"Continuing recording file {path}");
                Directory.CreateDirectory(Path.Combine(WonderToolsModule.REPLAY_ROOT));
                _tasRecordingWriter = new StreamWriter(path);
                lines.Add(item: $"# This file was autogenerated by {nameof(WonderToolsModule)} on {DateTime.Now}");
            }
            IsOpen = true;
        }
        public void SaveTasRecordingFile()
        {
            Logger.Log(LogLevel.Info, nameof(WonderToolsModule), $"Saving recording file {filename}");
            foreach (string line in lines)
            {
                _tasRecordingWriter.WriteLine(line);
            }
            CloseTasRecordingFile();
        }

        public void CloseTasRecordingFile()
        {
            _tasRecordingWriter.Flush();
            _tasRecordingWriter.Close();
            IsOpen = false;
        }

        public void ClearTasRecordingFile(string filename)
        {
            Logger.Log(LogLevel.Debug, nameof(WonderToolsModule), $"Clearing {filename}");
            File.WriteAllText(filename, string.Empty);
            lines.Clear();
        }
        public void AppendTasLine()
        {
            string tasLine =  string.Format("{0, 4}", InputState.framesSinceChange.ToString()) + InputState.PrevLine;
            lines.Add(tasLine);
        }
        public override string ToString()
        {
            string ret = Environment.NewLine;
            int ii = 0;
            foreach (string line in lines)
            {
                ii++;
                ret += ii + " " + line + Environment.NewLine;
            }
            return ret;
        }
    }
}
